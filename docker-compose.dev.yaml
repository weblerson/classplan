version: "3"

services:
  backend:
    container_name: dev-backend
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    env_file:
      - dev.env
    volumes:
      - ./backend/:/app
      - ./backend/staticfiles:/app/staticfiles
      - ./backend/media:/app/media
    command: >
      sh -c "python3.11 manage.py migrate &&
             python3.11 manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - django-network

  db:
    container_name: dev-database
    image: postgres:alpine
    volumes:
      - ./dev-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DEV_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DEV_POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - django-network

  rabbitmq:
    container_name: dev-rabbitmq-broker
    image: rabbitmq:alpine
    volumes:
      - ./dev-broker:/var/lib/rabbitmq
    ports:
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - django-network

  worker:
    container_name: dev-worker
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    env_file:
      - dev.env
    volumes:
      - ./backend/:/app
    command: celery -A core worker -l INFO
    depends_on:
      - db
      - rabbitmq
    networks:
      - django-network

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
    command: npm run dev -- --host
    depends_on:
      - backend
    ports:
      - "5173:5173"
    networks:
      - django-network

networks:
  django-network:
    driver: bridge
